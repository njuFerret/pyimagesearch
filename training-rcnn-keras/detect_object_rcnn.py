# -----------------------------
#   USAGE
# -----------------------------
# python detect_object_rcnn.py --image images/raccoon_01.jpg

# -----------------------------
#   IMPORTS
# -----------------------------
# Import the necessary packages
from pyimagesearch.nms import non_max_suppression
from pyimagesearch import config
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
import numpy as np
import argparse
import imutils
import pickle
import cv2

# Construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True, help="path to input image")
args = vars(ap.parse_args())

# Load the fine-tuned model and label binarizer from disk
print("[INFO] Loading model and label binarizer...")
model = load_model(config.MODEL_PATH)
lb = pickle.loads(open(config.ENCODER_PATH, "rb").read())

# Load the input image from disk
image = cv2.imread(args["image"])
image = imutils.resize(image, width=500)

# Run selective search on the image to generate bounding box proposal regions
print("[INFO] Running selective search...")
ss = cv2.ximgproc.segmentation.createSelectiveSearchSegmentation()
ss.setBaseImage(image)
ss.switchToSelectiveSearchFast()
rects = ss.process()

# Initialize the list of region proposals that are going to used for classifying alongside their associated bounding box
proposals = []
boxes = []

# Loop over the region proposal bounding box coordinates generated by running selective search
for (x, y, w, h) in rects[:config.MAX_PROPOSALS_INFER]:
    # Extract the region from the input image, convert it from BGR to RGB channel ordering, and then resize it to the
    # required input dimensions of the CNN
    roi = image[y:y + h, x:x + w]
    roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
    roi = cv2.resize(roi, config.INPUT_DIMS, interpolation=cv2.INTER_CUBIC)
    # Further preprocess by the ROI
    roi = img_to_array(roi)
    roi = preprocess_input(roi)
    # Update the proposals and bounding boxes lists
    proposals.append(roi)
    boxes.append((x, y, x + w, y + h))

# Convert the proposals and bounding boxes into Numpy arrays
proposals = np.array(proposals, dtype="float32")
boxes = np.array(boxes, dtype="int32")
print("[INFO] Proposal shape: {}".format(proposals.shape))

# Classify each of the proposal ROIs using the fined-tuned model
print("[INFO] Classifying proposals...")
proba = model.predict(proposals)

# Find the index of all the predictions that are positive for the "raccoon" class
print("[INFO] Applying NMS...")
labels = lb.classes_[np.argmax(proba, axis=1)]
idxs = np.where(labels == "raccoon")[0]

# Use the indexes to extract the bounding boxes and associated class label probabilities
# associated with the "raccoon" class
boxes = boxes[idxs]
proba = proba[idxs][:, 1]

# Further filter indexes by enforcing a minimum prediction probability be met
idxs = np.where(proba >= config.MIN_PROB)
boxes = boxes[idxs]
proba = proba[idxs]

# Clone the original image in order to draw on it
clone = image.copy()

# Loop over the bounding boxes and the associated probabilities
for (box, prob) in zip(boxes, proba):
    # Draw the bounding box, label, and probability on the image
    (startX, startY, endX, endY) = box
    cv2.rectangle(clone, (startX, startY), (endX, endY), (0, 255, 0), 2)
    y = startY - 10 if startY - 10 > 10 else startY + 10
    text = "Raccoon: {:.2f}%".format(prob * 100)
    cv2.putText(clone, text, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 255, 0), 2)

# Show the output after *before* running NMS
cv2.imshow("Before NMS", clone)

# Run non-maximum suppression on the bounding boxes
boxIdxs = non_max_suppression(boxes, proba)

# Loop over the bounding box indexes
for i in boxIdxs:
    # Draw the bounding box, label, and probability on the image
    (startX, startY, endX, endY) = boxes[i]
    cv2.rectangle(image, (startX, startY), (endX, endY), (0, 255, 0), 2)
    y = startY - 10 if startY - 10 > 10 else startY + 10
    text = "Raccoon: {:.2f}%".format(proba[i] * 100)
    cv2.putText(image, text, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 255, 0), 2)

# Show the output image *after* running NMS
cv2.imshow("After NMS", image)
cv2.waitKey(0)
